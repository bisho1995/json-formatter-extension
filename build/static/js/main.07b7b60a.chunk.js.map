{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["JSON_VALIDITY","App","props","textAreaRef","state","isValidJson","errorMessage","handleFormatJsonClick","e","rawJson","current","value","formattedJSON","JSON","stringify","parse","setState","error","handleCopyClick","copy","createRef","this","style","display","flexDirection","padding","minHeight","minWidth","flex","justifyContent","onClick","fontSize","color","height","ref","placeholder","width","borderRadius","border","React","PureComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"2OAIA,IAAMA,EACW,EADXA,EAEG,EAFHA,EAGK,EAuFIC,E,kDA9Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IANRC,YAAc,KAKK,EAJnBC,MAAQ,CACNC,YAAaL,EACbM,aAAc,IAEG,EAInBC,sBAAwB,SAACC,GACvB,IAAMC,EAAU,EAAKN,YAAYO,QAAQC,MAEzC,IACE,IAAMC,EAAgBC,KAAKC,UAAUD,KAAKE,MAAMN,GAAU,KAAM,GAChE,EAAKN,YAAYO,QAAQC,MAAQC,EAEjC,EAAKI,SAAS,CAAEX,YAAaL,IAC7B,MAAOiB,GACP,EAAKD,SAAS,CACZX,YAAaL,EACbM,aAAc,0CAfD,EAmBnBY,gBAAkB,WAChB,EAAKf,YAAYO,SAAWS,IAAK,EAAKhB,YAAYO,QAAQC,QAlB1D,EAAKR,YAAciB,sBAFF,E,qDAsBT,IAAD,EAC+BC,KAAKjB,MAAnCC,EADD,EACCA,YAAaC,EADd,EACcA,aAErB,OACE,yBACEgB,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,QAAS,WACTC,UAAW,IACXC,SAAU,MAGZ,yBACEL,MAAO,CACLM,KAAM,EACNL,QAAS,OACTM,eAAgB,aAGlB,4BAAQC,QAAST,KAAKH,iBAAtB,QACA,4BACEI,MAAO,CAAEG,QAAS,GAAIM,SAAU,IAChCD,QAAST,KAAKd,uBAFhB,WAOF,yBAAKe,MAAO,CAAEU,MAAO,MAAOC,OAAQ,KAAO3B,GAC3C,6BACA,yBACEgB,MAAO,CACLO,eAAgB,SAChBN,QAAS,SAGX,8BACEW,IAAKb,KAAKlB,YACVgC,YAAY,qBACZb,MAAO,CACLc,MAAO,OACPH,OAAQ,OACRJ,eAAgB,SAChBQ,aAAc,EACdC,OACEjC,IAAgBL,EACZ,gBACA,2B,GA3EFuC,IAAMC,eCETC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,EAAgBc,QAAQC,O","file":"static/js/main.07b7b60a.chunk.js","sourcesContent":["import React, { createRef } from \"react\";\nimport copy from \"copy-to-clipboard\";\nimport { utils } from \"@utils/utils\";\n\nconst JSON_VALIDITY = {\n  UNINITIALIZED: 0,\n  VALID: 1,\n  INVALID: 2,\n};\n\nclass App extends React.PureComponent {\n  textAreaRef = null;\n  state = {\n    isValidJson: JSON_VALIDITY.UNINITIALIZED,\n    errorMessage: \"\",\n  };\n  constructor(props) {\n    super(props);\n    this.textAreaRef = createRef();\n  }\n  handleFormatJsonClick = (e) => {\n    const rawJson = this.textAreaRef.current.value;\n\n    try {\n      const formattedJSON = JSON.stringify(JSON.parse(rawJson), null, 2);\n      this.textAreaRef.current.value = formattedJSON;\n\n      this.setState({ isValidJson: JSON_VALIDITY.VALID });\n    } catch (error) {\n      this.setState({\n        isValidJson: JSON_VALIDITY.INVALID,\n        errorMessage: \"The text is not a valid json object\",\n      });\n    }\n  };\n  handleCopyClick = () => {\n    this.textAreaRef.current && copy(this.textAreaRef.current.value);\n  };\n  render() {\n    const { isValidJson, errorMessage } = this.state;\n\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          padding: \"4px 12px\",\n          minHeight: 600,\n          minWidth: 500,\n        }}\n      >\n        <div\n          style={{\n            flex: 1,\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n          }}\n        >\n          <button onClick={this.handleCopyClick}>Copy</button>\n          <button\n            style={{ padding: 14, fontSize: 16 }}\n            onClick={this.handleFormatJsonClick}\n          >\n            Format\n          </button>\n        </div>\n        <div style={{ color: \"red\", height: 16 }}>{errorMessage}</div>\n        <br />\n        <div\n          style={{\n            justifyContent: \"center\",\n            display: \"flex\",\n          }}\n        >\n          <textarea\n            ref={this.textAreaRef}\n            placeholder='Paste json here...'\n            style={{\n              width: \"100%\",\n              height: \"85vh\",\n              justifyContent: \"center\",\n              borderRadius: 4,\n              border:\n                isValidJson === JSON_VALIDITY.INVALID\n                  ? \"2px solid red\"\n                  : \"1px solid black\",\n            }}\n          ></textarea>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}